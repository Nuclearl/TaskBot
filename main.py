from telebot.types import *
from config import *
import telebot, sqlite3, time, threading, datetime
from db_function import *

bot = telebot.TeleBot(token, threaded=True)

back_btn = '‚¨ÖÔ∏è–ù–∞–∑–∞–¥'
main_back_btn = '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é'
mail_but = "–†–∞—Å—Å—ã–ª–∫–∞"
backMail_but = '–ù–∞–∑–∞–¥ ‚óÄÔ∏è'
preMail_but = '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä üëÅ'
startMail_but = '–°—Ç–∞—Ä—Ç üèÅ'
textMail_but = '–¢–µ–∫—Å—Ç üìù'
butMail_but = '–°—Å—ã–ª–∫–∞-–∫–Ω–æ–ø–∫–∞ ‚è∫'
photoMail_but = '–§–æ—Ç–æ üì∏'


def mail_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[KeyboardButton(name) for name in [textMail_but, photoMail_but]])
    keyboard.add(*[KeyboardButton(name) for name in [butMail_but, preMail_but]])
    keyboard.add(*[KeyboardButton(name) for name in [backMail_but, startMail_but]])
    return keyboard


def admin_keyboard(message=None):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[KeyboardButton(name) for name in [mail_but]])
    keyboard.add(*[KeyboardButton(name) for name in ['–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ']])
    if message:
        bot.clear_step_handler(message)
    return keyboard


def main_keyboard(message=None):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[KeyboardButton(name) for name in ['–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è üìó']])
    keyboard.add(*[KeyboardButton(name) for name in ['–ë–∞–ª–∞–Ω—Å üí∞']])
    if message:
        bot.clear_step_handler(message)
    return keyboard


def isfloat(x):
    try:
        a = float(x)
    except (TypeError, ValueError):
        return False
    else:
        return True


@bot.message_handler(commands=["admin"], func=lambda m: m.from_user.id in admins)
def admin_command(message: Message):
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω –º–µ–Ω—é", reply_markup=admin_keyboard(message))


def mailing(user_ids, lively, banned, deleted, chat_id, mail_text, mail_photo, mail_link, mail_link_text):
    conn = sqlite3.connect("db/user.db", check_same_thread=False, timeout=10)
    c = conn.cursor()
    users_block = []
    start_mail_time = time.time()
    c.execute('''SELECT COUNT(*) FROM users''')
    allusers = int(c.fetchone()[0])
    for user_id in user_ids:
        try:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(text=mail_link_text, url=mail_link))
            if str(mail_photo) != '0':
                if str(mail_link_text) != '0':
                    bot.send_photo(user_id, caption=mail_text, photo=mail_photo, parse_mode='HTML',
                                   reply_markup=keyboard)
                else:
                    bot.send_photo(user_id, caption=mail_text, parse_mode='HTML', photo=mail_photo)
            else:
                if str(mail_link_text) not in '0':
                    bot.send_message(user_id, text=mail_text, parse_mode='HTML',
                                     reply_markup=keyboard)
                else:
                    bot.send_message(user_id, parse_mode='HTML', text=mail_text)
            lively += 1
        except Exception as e:
            if 'bot was blocked by the user' in str(e):
                users_block.append(user_id)
                banned += 1
                # database is locked
    print(users_block)
    for user_id in users_block:
        c.execute("UPDATE users SET lively = (?) WHERE user_id = (?)", ('block', user_id,))
    admin_text = '*–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! ‚úÖ\n\n' \
                 'üôÇ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {0}\n' \
                 '*% –æ—Ç —á–∏—Å–ª–∞ –≤—Å–µ—Ö:* {1}%\n' \
                 '*üí© –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö:* {3}\n' \
                 '*üïì –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏:* {2}'.format(str(lively), str(round(lively / allusers * 100, 2)),
                                                   str(round(time.time() - start_mail_time, 2)) + ' —Å–µ–∫', str(banned))
    bot.send_message(chat_id, admin_text, parse_mode='Markdown', reply_markup=admin_keyboard())
    c.close()
    conn.commit()


def store_task(chat_id, message_id, die_time=0, instruction=0, url=0, price=0, time=0, status=0, counter=0, check=True):
    conn = sqlite3.connect("db/task.db", check_same_thread=False, timeout=10)
    c = conn.cursor()
    if check:
        c.execute(
            "INSERT INTO tasks (user_id, message_id, die_timeTask, instructionTask ,urlTask, priceTask, timeTask) VALUES (?,?,?,?,?,?,?)",
            (chat_id, message_id, die_time, instruction, url, price, time))
    c.close()
    conn.commit()


def send_task_all_users(chat_id):
    conn = sqlite3.connect("db/user.db", check_same_thread=False, timeout=10)
    c = conn.cursor()
    users_block = []
    lively, banned = 0, 0
    instruction, url, price, timetask = c.execute(
        "select instructionTask, urlTask, priceTask, timeTask from users where user_id = ?",
        (chat_id,)).fetchone()
    now_time = datetime.datetime.now()
    die_time = now_time + datetime.timedelta(minutes=timetask)
    user_ids = []
    c.execute("""select user_id from users""")
    user_id = c.fetchone()
    while user_id is not None:
        user_ids.append(user_id[0])
        user_id = c.fetchone()
    for user_id in user_ids:
        try:
            keyboard = InlineKeyboardMarkup()

            message = bot.send_message(chat_id, f" üìã <b>–ó–∞–¥–∞–Ω–∏–µ</b>\n\n"
                                                f"üìç <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>\n<i>{instruction}</i>\n\n"
                                                f"üíµ <b>–¶–µ–Ω–∞:</b> {price} —Ä—É–±–ª–µ–π\n"
                                                f"‚è≥ <b>–í—Ä–µ–º—è:</b> {timetask} –º–∏–Ω—É—Ç", parse_mode="HTML",
                                       reply_markup=keyboard, disable_web_page_preview=True)
            if url != 0:
                keyboard.row(InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", url=url))
            keyboard.row(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"checkTask_{message.message_id}"))
            bot.add
            store_task(user_id, message.message_id, die_time, instruction, url, price, timetask)
            lively += 1
        except Exception as e:
            if 'bot was blocked by the user' in str(e):
                users_block.append(user_id)
                banned += 1
    for user_id in users_block:
        c.execute("UPDATE users SET lively = (?) WHERE user_id = (?)", ('block', user_id,))
    admin_text = '*–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!* ‚úÖ'
    bot.send_message(chat_id, admin_text, parse_mode='Markdown', reply_markup=admin_keyboard())
    c.close()
    conn.commit()


@bot.message_handler(commands=['start'])
def start(message):
    add_user(message.chat.id)
    bot.send_message(message.chat.id,
                     "\t\t–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–ê–ª–∏—Å–∞</b>, –∏ —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–¥–∞–µ—Ç –¥–µ–Ω—å–≥–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ Instagram ‚è¨"
                     "\n   üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç ‚úèÔ∏è \n   üìå –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ ‚ù§Ô∏è\n   üìå –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É üß®\n\n"
                     "\t<i>–ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —è —Ä–∞–∑–¥–∞—é –æ—Ç 50 –¥–æ 1000 —Ä—É–±\n"
                     "\t–ó–∞–¥–∞–Ω–∏—è –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –∏ –±—É–¥—É—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã <b>–°–¢–†–û–ì–û –û–ì–†–ê–ù–ò–ß–ï–ù–ù–û–ï</b> –≤—Ä–µ–º—è (10-20 –º–∏–Ω—É—Ç), –ø–æ—Å–ª–µ —á–µ–≥–æ –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è."
                     "–ï—Å–ª–∏ —Ç—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è - –¥–µ–Ω—å–≥–∏ —Ç—ã –Ω–µ –ø–æ–ª—É—á–∏—à—å. –¢–∞–∫ —á—Ç–æ –≤–∫–ª—é—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç –º–µ–Ω—è –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏.</i>",
                     parse_mode='HTML', disable_web_page_preview=True)


@bot.message_handler(func=lambda m: m.text == mail_but and m.chat.id in admins and m.from_user.id == m.chat.id)
def cheker(message: Message):
    conn = sqlite3.connect("db/user.db", check_same_thread=False, timeout=10)

    def admin_mailing(message: Message):
        chat_id = message.chat.id
        conn = sqlite3.connect("db/user.db", check_same_thread=False, timeout=10)
        msgtext = message.text
        c = conn.cursor()
        c.execute("""select textMail from users where user_id = %s""" % chat_id)
        textMailUser = str(c.fetchone()[0])
        c.execute("""select photoMail from users where user_id = %s""" % chat_id)
        photoMailUser = str(c.fetchone()[0])
        c.execute("""select butTextMail from users where user_id = %s""" % chat_id)
        butTextMail = str(c.fetchone()[0])
        c.execute("""select butUrlMail from users where user_id = %s""" % chat_id)
        butUrlMail = str(c.fetchone()[0])
        if msgtext == mail_but:
            bot.send_message(chat_id, '*–í—ã –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ *üì¢\n\n'
                                      '–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ *{0}*\n\n'
                                      '–î–ª—è –æ—Ç–º–µ–Ω—ã –∫–∞–∫–æ–π-–ª–∏–±–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start\n\n'
                                      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ *{1}* –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏, –∞ *{2}* –¥–ª—è –Ω–∞—á–∞–ª–∞'
                                      ' —Ä–∞—Å—Å—ã–ª–∫–∏\n\n'
                                      '–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É *HTML*, —Ç–æ –µ—Å—Ç—å:\n'
                                      '<b>*–ñ–∏—Ä–Ω—ã–π*</b>\n'
                                      '<i>_–ö—É—Ä—Å–∏–≤_</i>\n'
                                      '<pre>`–ú–æ–Ω–æ—à–∏—Ä–Ω—ã–π`</pre>\n'
                                      '<a href="—Å—Å—ã–ª–∫–∞-–Ω–∞-—Å–∞–π—Ç">[–û–±–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –≤ —Å—Å—ã–ª–∫—É](test.ru)</a>'.format(
                backMail_but, preMail_but, startMail_but
            ),
                             parse_mode="markdown", reply_markup=mail_menu())
            bot.register_next_step_handler(message, admin_mailing)

        elif msgtext == backMail_but:
            bot.send_message(chat_id, backMail_but, reply_markup=admin_keyboard(message))
            bot.clear_step_handler(message)

        elif msgtext == preMail_but:
            try:
                if butTextMail == '0' and butUrlMail == '0':
                    if photoMailUser == '0':
                        bot.send_message(chat_id, textMailUser, parse_mode='html', reply_markup=mail_menu())
                    else:
                        bot.send_photo(chat_id, caption=textMailUser, photo=photoMailUser, parse_mode='html',
                                       reply_markup=mail_menu())
                else:
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(InlineKeyboardButton(text=butTextMail, url=butUrlMail))
                    if photoMailUser == '0':
                        bot.send_message(chat_id, textMailUser, parse_mode='html',
                                         reply_markup=keyboard)
                    else:
                        bot.send_photo(chat_id, caption=textMailUser, photo=photoMailUser, parse_mode='html',
                                       reply_markup=keyboard)
            except:
                bot.send_message(chat_id, "–£–ø—Å..–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            bot.register_next_step_handler(message, admin_mailing)

        elif msgtext == startMail_but:
            c.execute("""update users set textMail = 0 where user_id = %s""" % chat_id)
            c.execute("""update users set photoMail = 0 where user_id = %s""" % chat_id)
            c.execute("""update users set butTextMail = 0 where user_id = %s""" % chat_id)
            c.execute("""update users set butUrlMail = 0 where user_id = %s""" % chat_id)
            user_ids = []
            c.execute("""select user_id from users""")
            user_id = c.fetchone()
            while user_id is not None:
                user_ids.append(user_id[0])
                user_id = c.fetchone()
            c.close()
            mail_thread = threading.Thread(target=mailing, args=(
                user_ids, 0, 0, 0, chat_id, textMailUser, photoMailUser, butUrlMail, butTextMail))
            mail_thread.start()
            bot.send_message(chat_id, '–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!',
                             reply_markup=admin_keyboard(message))

        elif textMail_but == msgtext:
            def process_textMail(message: Message):
                if message.text:
                    if message.text == "/start":
                        bot.send_message(chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                    else:
                        c = conn.cursor()
                        c.execute("update users set textMail = (?) where user_id = (?)", (message.text,
                                                                                          chat_id))
                        conn.commit()
                        c.close()
                        bot.send_message(chat_id, "–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    bot.register_next_step_handler(message, admin_mailing)

            bot.send_message(chat_id,
                             '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–µ–≥–∏ HTML. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –Ω–∞–∂–∏—Ç–µ /start',
                             reply_markup=mail_menu())
            bot.register_next_step_handler(message, process_textMail)

        elif photoMail_but == msgtext:
            keyboard = InlineKeyboardMarkup()
            keyboard.row(InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ üìù', callback_data='editPhotoMail'))
            keyboard.row(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ ‚ùå', callback_data='deletePhoto'))
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚§µ', reply_markup=keyboard)
            bot.register_next_step_handler(message, admin_mailing)

        elif butMail_but == msgtext:
            keyboard = InlineKeyboardMarkup()
            keyboard.row(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ üìù', callback_data='editTextBut'))
            keyboard.row(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –∫–Ω–æ–ø–∫–∏ üîó', callback_data='editUrlBut'))
            keyboard.row(InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –≤—Å—ë –∫ —á–µ—Ä—Ç—è–º üôÖ‚Äç‚ôÇ', callback_data='deleteBut'))
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚§µ', reply_markup=keyboard)
            bot.register_next_step_handler(message, admin_mailing)

        elif msgtext == "/start":
            bot.clear_step_handler(message)
            start(message)

        else:
            bot.clear_step_handler(message)
            bot.register_next_step_handler(message, admin_mailing)

    user_id = message.chat.id
    c = conn.cursor()
    if c.execute("select * from users where user_id = %s" % user_id).fetchone() is None:
        c.execute("insert into users (user_id, state) values (?, ?)",
                  (user_id, 0))
        conn.commit()
    c.close()
    bot.clear_step_handler(message)
    admin_mailing(message)


@bot.message_handler(
    func=lambda m: m.text in ['–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ'] and m.chat.id in admins and m.from_user.id == m.chat.id)
def update(m):
    if m.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ':
        def get_price_task(m):
            if m.content_type == 'text':
                if m.text == '/start':
                    start(m)
                elif m.text == '/admin':
                    admin_command(m)
                elif isfloat(m.text):
                    if float(m.text) > 0:
                        conn = sqlite3.connect("db/user.db", check_same_thread=False, timeout=10)
                        c = conn.cursor()
                        c.execute("update users set priceTask = (?) where user_id = (?)", (m.text,
                                                                                           m.chat.id))
                        instruction, url, price, timetask = c.execute(
                            "select instructionTask, urlTask, priceTask, timeTask from users where user_id = ?",
                            (m.chat.id,)).fetchone()
                        conn.commit()
                        c.close()
                        keyboard = InlineKeyboardMarkup()
                        if url != 0:
                            keyboard.row(InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", url=url))
                        keyboard.row(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="pass"))
                        try:
                            message = bot.send_message(m.chat.id, f" üìã <b>–ó–∞–¥–∞–Ω–∏–µ</b>\n\n"
                                                                  f"üìç <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>\n<i>{instruction}</i>\n\n"
                                                                  f"üíµ <b>–¶–µ–Ω–∞:</b> {price} —Ä—É–±–ª–µ–π\n"
                                                                  f"‚è≥ <b>–í—Ä–µ–º—è:</b> {timetask} –º–∏–Ω—É—Ç",
                                                       parse_mode="HTML", reply_markup=keyboard,
                                                       disable_web_page_preview=True)
                            keyboard = InlineKeyboardMarkup()
                            keyboard.row(InlineKeyboardButton("–ü—É–±–ª–∏–∫–∞—Ü–∏—è",
                                                              callback_data=f"publicationTask_{message.message_id}"))
                            keyboard.row(
                                InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"removeTask_{message.message_id}"))
                            bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨áÔ∏è", reply_markup=keyboard)

                        except:
                            bot.send_message(m.chat.id, "üö´ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
                    else:
                        bot.send_message(m.chat.id, "–°–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                        bot.register_next_step_handler(message=m, callback=get_price_task)
                else:
                    bot.send_message(m.chat.id, "–°–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    bot.register_next_step_handler(message=m, callback=get_price_task)

            else:
                bot.send_message(m.chat.id, "–°–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                bot.register_next_step_handler(message=m, callback=get_price_task)

        def get_time_task(m):
            if m.content_type == 'text':
                if m.text == '/start':
                    start(m)
                elif m.text == '/admin':
                    admin_command(m)
                elif m.text.isdigit():
                    if int(m.text) > 0:
                        conn = sqlite3.connect("db/user.db", check_same_thread=False, timeout=10)
                        c = conn.cursor()
                        c.execute("update users set timeTask = (?) where user_id = (?)", (m.text,
                                                                                          m.chat.id))
                        conn.commit()
                        c.close()
                        bot.send_message(m.chat.id, 'üí≤ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä—É–±–ª—è—Ö:')
                        bot.register_next_step_handler(message=m, callback=get_price_task)
                    else:
                        bot.send_message(m.chat.id, "–°–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                        bot.register_next_step_handler(message=m, callback=get_time_task)
                else:
                    bot.send_message(m.chat.id, "–°–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    bot.register_next_step_handler(message=m, callback=get_time_task)

            else:
                bot.send_message(m.chat.id, "–°–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                bot.register_next_step_handler(message=m, callback=get_time_task)

        def get_url_task(m):
            if m.content_type == 'text':
                if m.text == '/start':
                    start(m)
                elif m.text == '/admin':
                    admin_command(m)
                else:
                    conn = sqlite3.connect("db/user.db", check_same_thread=False, timeout=10)
                    c = conn.cursor()
                    if m.text != "/next":
                        c.execute("update users set urlTask = (?) where user_id = (?)", (m.text,
                                                                                         m.chat.id))
                    else:
                        c.execute("update users set urlTask = (?) where user_id = (?)", (0,
                                                                                         m.chat.id))
                    conn.commit()
                    c.close()
                    bot.send_message(m.chat.id, '‚è± –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö:')
                    bot.register_next_step_handler(message=m, callback=get_time_task)
            else:
                bot.send_message(m.chat.id, "–°–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                bot.register_next_step_handler(message=m, callback=get_url_task)

        def get_instruction_task(m):
            if m.content_type == 'text':
                if m.text == '/start':
                    start(m)
                elif m.text == '/admin':
                    admin_command(m)
                else:
                    conn = sqlite3.connect("db/user.db", check_same_thread=False, timeout=10)
                    c = conn.cursor()
                    c.execute("update users set instructionTask = (?) where user_id = (?)", (m.text,
                                                                                             m.chat.id))
                    conn.commit()
                    c.close()
                    bot.send_message(m.chat.id,
                                     '‚èπ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏: \n\n–ù–∞–∂–º–∏—Ç–µ /next –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:')
                    bot.register_next_step_handler(message=m, callback=get_url_task)

            else:
                bot.send_message(m.chat.id, "–°–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                bot.register_next_step_handler(message=m, callback=get_instruction_task)

        bot.send_message(m.chat.id, "‚úíÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:")
        bot.clear_step_handler(m)
        bot.register_next_step_handler(message=m, callback=get_instruction_task)


@bot.callback_query_handler(func=lambda c: c.data)
def callback(callback_query: telebot.types.CallbackQuery):
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    if 'editTextBut' in callback_query.data:
        bot.clear_step_handler(callback_query.message)

        def process_editTextBut(message: Message):
            if message.text:
                conn = sqlite3.connect("db/user.db", check_same_thread=False, timeout=10)
                c = conn.cursor()
                # c.execute("""update users set state = 0 where user_id = %s""" % (chat_id))
                c.execute("update users set butTextMail = (?) where user_id = (?)", (message.text,
                                                                                     chat_id))
                conn.commit()
                c.close()
                bot.send_message(chat_id, '–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω! ‚úÖ', reply_markup=mail_menu())

        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏")
        bot.register_next_step_handler(callback_query.message, process_editTextBut)

    elif 'editUrlBut' in callback_query.data:
        def process_editUrlBut(message: Message):
            if message.text:
                conn = sqlite3.connect("db/user.db", check_same_thread=False, timeout=10)
                c = conn.cursor()
                c.execute("update users set butUrlMail = (?) where user_id = (?)", (message.text,
                                                                                    chat_id))
                conn.commit()
                c.close()
                bot.send_message(chat_id, '–°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! ‚úÖ', reply_markup=mail_menu())
                cheker(message)

        bot.clear_step_handler(callback_query.message)
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É üìù', reply_markup=mail_menu())
        bot.register_next_step_handler(callback_query.message, process_editUrlBut)

    elif 'deleteBut' in callback_query.data:
        conn = sqlite3.connect("db/user.db", check_same_thread=False, timeout=10)
        c = conn.cursor()
        c.execute("""update users set butUrlMail = 0 where user_id = (?)""", (chat_id,))
        c.execute("""update users set butTextMail = 0 where user_id = (?)""", (chat_id,))
        conn.commit()
        c.close()
        bot.send_message(chat_id, '–£–¥–∞–ª–µ–Ω–æ! üóë', reply_markup=mail_menu())
        cheker(callback_query.message)

    elif 'editPhotoMail' in callback_query.data:
        def wait_photo(message: Message):
            if message.content_type == 'photo':
                conn = sqlite3.connect("db/user.db", check_same_thread=False, timeout=10)
                c = conn.cursor()
                msgphoto = message.json['photo'][0]['file_id']
                c.execute("""update users set photoMail = (?) where user_id = (?)""", (msgphoto, chat_id,))
                bot.send_message(chat_id, '–§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ! ‚úÖ', reply_markup=mail_menu())
                conn.commit()
                c.close()
                bot.register_next_step_handler(message, cheker)
            else:
                bot.send_message(chat_id, "–£–ø—Å...", reply_markup=mail_menu())
                bot.register_next_step_handler(message, cheker)

        bot.clear_step_handler(callback_query.message)
        bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é', reply_markup=mail_menu())
        bot.register_next_step_handler(callback_query.message, wait_photo)

    elif 'deletePhoto' in callback_query.data:
        conn = sqlite3.connect("db/user.db", check_same_thread=False, timeout=10)
        c = conn.cursor()
        c.execute("""update users set photoMail = 0 where user_id = (?)""", (chat_id,))
        conn.commit()
        c.close()
        bot.send_message(chat_id, '–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ! ‚úÖ', reply_markup=mail_menu())
        cheker(callback_query.message)
    elif 'removeTask' in callback_query.data:
        id_message = int(str(callback_query.data).split("_")[1])

        conn = sqlite3.connect("db/user.db", check_same_thread=False, timeout=10)
        c = conn.cursor()
        c.execute("update users set instructionTask = (?) where user_id = (?)", (0,
                                                                                 callback_query.message.chat.id))
        c.execute("update users set urlTask = (?) where user_id = (?)", (0,
                                                                         callback_query.message.chat.id))
        c.execute("update users set priceTask = (?) where user_id = (?)", (0,
                                                                           callback_query.message.chat.id))
        c.execute("update users set timeTask = (?) where user_id = (?)", (0,
                                                                          callback_query.message.chat.id))
        conn.commit()
        c.close()
        bot.delete_message(callback_query.from_user.id, message_id=id_message)
        bot.edit_message_text("–£–¥–∞–ª–µ–Ω–æ...", callback_query.from_user.id, callback_query.message.message_id)
    elif 'publicationTask' in callback_query.data:
        chat_id = callback_query.message.chat.id
        id_message = int(str(callback_query.data).split("_")[1])
        task_thread = threading.Thread(target=send_task_all_users, args=(chat_id,))
        task_thread.start()
        bot.delete_message(chat_id, message_id=id_message)
        bot.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞—Å—å! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞.", callback_query.from_user.id,
                              callback_query.message.message_id)
    elif 'checkTask' in callback_query.data:
        message_id = int(str(callback_query.data).split("_")[1])
        chat_id = callback_query.from_user.id
        conn = sqlite3.connect("db/task.db", check_same_thread=False, timeout=10)
        c = conn.cursor()
        count = int(c.execute("SELECT counter FROM tasks WHERE user_id = ? and message_id = ?",
                              (chat_id, message_id)).fetchone()[0])
        if count == 0:
            bot.answer_callback_query(callback_query.id, "C–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ")
        else:
            pass


if __name__ == '__main__':
    bot.polling(none_stop=True)
    """
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            pass
            print(e)
    """
